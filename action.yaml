runs:
  using: 'composite'
  steps:
    - shell: powershell
      run: |
        $runUatPath = "${{ inputs.RUNUAT_PATH }}"
        if (-not (Test-Path $runUatPath)) {
          Write-Error "RunUAT.bat path is invalid: $runUatPath"
          exit 1
        }

        $uprojectPath = "${{ inputs.UPROJECT_PATH }}"
        $uprojectDir = Split-Path -Parent $uprojectPath
        $buildConfig = "${{ inputs.BUILD_CONFIG }}"
        $platform = "${{ inputs.PLATFORM }}"
        $clean = "${{ inputs.CLEAN }}"
        $server = "${{ inputs.SERVER }}"
        $cook = "${{ inputs.COOK }}"
        $stage = "${{ inputs.STAGE }}"
        $pak = "${{ inputs.PAK }}"
        $package = "${{ inputs.PACKAGE }}"
        $archive = "${{ inputs.ARCHIVE }}"
        $archivePath = "${{ inputs.ARCHIVE_PATH }}"
        $nullrhi = "${{ inputs.NULLRHI }}"
        $editor = "${{ inputs.EDITOR }}"
        $encryptIni = "${{ inputs.ENCRYPT_INI }}"
        $release = "${{ inputs.RELEASE }}"
        $patch = "${{ inputs.PATCH }}"
        $maps = "${{ inputs.MAPS }}"
        $deletePdb = "${{ inputs.DELETE_PDB }}"

        $cleanArg = if ($clean -eq 'true') { "-clean" } else { "" }
        $serverArg = if ($server -eq 'true') { "-server -serverplatform=$platform -noclient" } else { "" }
        $cookArg = if ($cook -eq 'true') { "-cook" } else { "" }
        $stageArg = if ($stage -eq 'true') { "-stage" } else { "" }
        $pakArg = if ($pak -eq 'true') { "-pak" } else { "" }
        $packageArg = if ($package -eq 'true') { "-package" } else { "" }
        $archiveArg = if ($archive -eq 'true') { "-archive -archivedirectory=`"$archivePath`"" } else { "" }
        $nullrhiArg = if ($nullrhi -eq 'true') { "-nullrhi" } else { "" }
        $editorArg = if ($archive -eq 'true') { "-nocompileeditor" } else { "" }
        $encryptIniArg = if ($encryptIni -eq 'true') { "-encryptinifiles" } else { "" }
        $releaseArg = if ($release -ne 'false') { "-createreleaseversion=$release" } else { "" }
        $patchArg = if ($patch -ne 'false') { "-generatepatch -basedonreleaseversion=$patch" } else { "" }
        $mapsArg = if ($maps -eq 'true') { "" } else { "-map=$maps" }

        $command = "& `"$runUatPath`" BuildCookRun " +
                  "-project=`"$uprojectPath`" " +
                  "-clientconfig=$buildConfig -serverconfig=$buildConfig -platform=$platform $mapsArg " +
                  "$cleanArg $serverArg $cookArg $stageArg $pakArg $packageArg $archiveArg $editorArg $encryptIniArg $releaseArg $patchArg " +
                  "-noP4 -build -unattended -utf8output -prereqs $nullrhiArg"

        Write-Output "Constructed Command: $command"
        Invoke-Expression $command

        if ($deletePdb -eq 'true') {
          Get-ChildItem -Path "$uprojectDir\Saved\StagedBuilds\" -Recurse -Filter *.pdb | Remove-Item -Force
        }
